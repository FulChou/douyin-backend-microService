// Code generated by Kitex v0.4.4. DO NOT EDIT.

package relationservice

import (
	"context"
	relationdemo "douyin_backend_microService/relation/kitex_gen/relationdemo"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*relationdemo.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Relation":    kitex.NewMethodInfo(relationHandler, newRelationArgs, newRelationResult, false),
		"GetFollow":   kitex.NewMethodInfo(getFollowHandler, newGetFollowArgs, newGetFollowResult, false),
		"GetFollower": kitex.NewMethodInfo(getFollowerHandler, newGetFollowerArgs, newGetFollowerResult, false),
		"GetFriend":   kitex.NewMethodInfo(getFriendHandler, newGetFriendArgs, newGetFriendResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "idl",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func relationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relationdemo.RelationActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relationdemo.RelationService).Relation(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RelationArgs:
		success, err := handler.(relationdemo.RelationService).Relation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RelationResult)
		realResult.Success = success
	}
	return nil
}
func newRelationArgs() interface{} {
	return &RelationArgs{}
}

func newRelationResult() interface{} {
	return &RelationResult{}
}

type RelationArgs struct {
	Req *relationdemo.RelationActionRequest
}

func (p *RelationArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relationdemo.RelationActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RelationArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RelationArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RelationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RelationArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RelationArgs) Unmarshal(in []byte) error {
	msg := new(relationdemo.RelationActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RelationArgs_Req_DEFAULT *relationdemo.RelationActionRequest

func (p *RelationArgs) GetReq() *relationdemo.RelationActionRequest {
	if !p.IsSetReq() {
		return RelationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RelationArgs) IsSetReq() bool {
	return p.Req != nil
}

type RelationResult struct {
	Success *relationdemo.RelationActionResponse
}

var RelationResult_Success_DEFAULT *relationdemo.RelationActionResponse

func (p *RelationResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relationdemo.RelationActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RelationResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RelationResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RelationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RelationResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RelationResult) Unmarshal(in []byte) error {
	msg := new(relationdemo.RelationActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RelationResult) GetSuccess() *relationdemo.RelationActionResponse {
	if !p.IsSetSuccess() {
		return RelationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RelationResult) SetSuccess(x interface{}) {
	p.Success = x.(*relationdemo.RelationActionResponse)
}

func (p *RelationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relationdemo.RelationFollowListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relationdemo.RelationService).GetFollow(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowArgs:
		success, err := handler.(relationdemo.RelationService).GetFollow(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowArgs() interface{} {
	return &GetFollowArgs{}
}

func newGetFollowResult() interface{} {
	return &GetFollowResult{}
}

type GetFollowArgs struct {
	Req *relationdemo.RelationFollowListRequest
}

func (p *GetFollowArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relationdemo.RelationFollowListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFollowArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowArgs) Unmarshal(in []byte) error {
	msg := new(relationdemo.RelationFollowListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowArgs_Req_DEFAULT *relationdemo.RelationFollowListRequest

func (p *GetFollowArgs) GetReq() *relationdemo.RelationFollowListRequest {
	if !p.IsSetReq() {
		return GetFollowArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFollowResult struct {
	Success *relationdemo.RelationFollowListResponse
}

var GetFollowResult_Success_DEFAULT *relationdemo.RelationFollowListResponse

func (p *GetFollowResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relationdemo.RelationFollowListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFollowResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowResult) Unmarshal(in []byte) error {
	msg := new(relationdemo.RelationFollowListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowResult) GetSuccess() *relationdemo.RelationFollowListResponse {
	if !p.IsSetSuccess() {
		return GetFollowResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowResult) SetSuccess(x interface{}) {
	p.Success = x.(*relationdemo.RelationFollowListResponse)
}

func (p *GetFollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFollowerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relationdemo.RelationFollowerListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relationdemo.RelationService).GetFollower(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowerArgs:
		success, err := handler.(relationdemo.RelationService).GetFollower(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowerResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowerArgs() interface{} {
	return &GetFollowerArgs{}
}

func newGetFollowerResult() interface{} {
	return &GetFollowerResult{}
}

type GetFollowerArgs struct {
	Req *relationdemo.RelationFollowerListRequest
}

func (p *GetFollowerArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relationdemo.RelationFollowerListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowerArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowerArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowerArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFollowerArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowerArgs) Unmarshal(in []byte) error {
	msg := new(relationdemo.RelationFollowerListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowerArgs_Req_DEFAULT *relationdemo.RelationFollowerListRequest

func (p *GetFollowerArgs) GetReq() *relationdemo.RelationFollowerListRequest {
	if !p.IsSetReq() {
		return GetFollowerArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowerArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFollowerResult struct {
	Success *relationdemo.RelationFollowerListResponse
}

var GetFollowerResult_Success_DEFAULT *relationdemo.RelationFollowerListResponse

func (p *GetFollowerResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relationdemo.RelationFollowerListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowerResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowerResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowerResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFollowerResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowerResult) Unmarshal(in []byte) error {
	msg := new(relationdemo.RelationFollowerListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowerResult) GetSuccess() *relationdemo.RelationFollowerListResponse {
	if !p.IsSetSuccess() {
		return GetFollowerResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowerResult) SetSuccess(x interface{}) {
	p.Success = x.(*relationdemo.RelationFollowerListResponse)
}

func (p *GetFollowerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFriendHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relationdemo.RelationFriendListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relationdemo.RelationService).GetFriend(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFriendArgs:
		success, err := handler.(relationdemo.RelationService).GetFriend(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFriendResult)
		realResult.Success = success
	}
	return nil
}
func newGetFriendArgs() interface{} {
	return &GetFriendArgs{}
}

func newGetFriendResult() interface{} {
	return &GetFriendResult{}
}

type GetFriendArgs struct {
	Req *relationdemo.RelationFriendListRequest
}

func (p *GetFriendArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relationdemo.RelationFriendListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFriendArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFriendArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFriendArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFriendArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFriendArgs) Unmarshal(in []byte) error {
	msg := new(relationdemo.RelationFriendListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFriendArgs_Req_DEFAULT *relationdemo.RelationFriendListRequest

func (p *GetFriendArgs) GetReq() *relationdemo.RelationFriendListRequest {
	if !p.IsSetReq() {
		return GetFriendArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFriendArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFriendResult struct {
	Success *relationdemo.RelationFriendListResponse
}

var GetFriendResult_Success_DEFAULT *relationdemo.RelationFriendListResponse

func (p *GetFriendResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relationdemo.RelationFriendListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFriendResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFriendResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFriendResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFriendResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFriendResult) Unmarshal(in []byte) error {
	msg := new(relationdemo.RelationFriendListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFriendResult) GetSuccess() *relationdemo.RelationFriendListResponse {
	if !p.IsSetSuccess() {
		return GetFriendResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFriendResult) SetSuccess(x interface{}) {
	p.Success = x.(*relationdemo.RelationFriendListResponse)
}

func (p *GetFriendResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Relation(ctx context.Context, Req *relationdemo.RelationActionRequest) (r *relationdemo.RelationActionResponse, err error) {
	var _args RelationArgs
	_args.Req = Req
	var _result RelationResult
	if err = p.c.Call(ctx, "Relation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollow(ctx context.Context, Req *relationdemo.RelationFollowListRequest) (r *relationdemo.RelationFollowListResponse, err error) {
	var _args GetFollowArgs
	_args.Req = Req
	var _result GetFollowResult
	if err = p.c.Call(ctx, "GetFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollower(ctx context.Context, Req *relationdemo.RelationFollowerListRequest) (r *relationdemo.RelationFollowerListResponse, err error) {
	var _args GetFollowerArgs
	_args.Req = Req
	var _result GetFollowerResult
	if err = p.c.Call(ctx, "GetFollower", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFriend(ctx context.Context, Req *relationdemo.RelationFriendListRequest) (r *relationdemo.RelationFriendListResponse, err error) {
	var _args GetFriendArgs
	_args.Req = Req
	var _result GetFriendResult
	if err = p.c.Call(ctx, "GetFriend", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
