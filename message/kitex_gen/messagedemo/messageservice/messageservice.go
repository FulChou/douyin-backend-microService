// Code generated by Kitex v0.4.4. DO NOT EDIT.

package messageservice

import (
	"context"
	messagedemo "douyin_backend_microService/message/kitex_gen/messagedemo"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageServiceServiceInfo
}

var messageServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MessageService"
	handlerType := (*messagedemo.MessageService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetMessage":    kitex.NewMethodInfo(getMessageHandler, newGetMessageArgs, newGetMessageResult, false),
		"MessageAction": kitex.NewMethodInfo(messageActionHandler, newMessageActionArgs, newMessageActionResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "douyin",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func getMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(messagedemo.MessageRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(messagedemo.MessageService).GetMessage(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetMessageArgs:
		success, err := handler.(messagedemo.MessageService).GetMessage(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetMessageResult)
		realResult.Success = success
	}
	return nil
}
func newGetMessageArgs() interface{} {
	return &GetMessageArgs{}
}

func newGetMessageResult() interface{} {
	return &GetMessageResult{}
}

type GetMessageArgs struct {
	Req *messagedemo.MessageRequest
}

func (p *GetMessageArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(messagedemo.MessageRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetMessageArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetMessageArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetMessageArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetMessageArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetMessageArgs) Unmarshal(in []byte) error {
	msg := new(messagedemo.MessageRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetMessageArgs_Req_DEFAULT *messagedemo.MessageRequest

func (p *GetMessageArgs) GetReq() *messagedemo.MessageRequest {
	if !p.IsSetReq() {
		return GetMessageArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetMessageResult struct {
	Success *messagedemo.MessageResponse
}

var GetMessageResult_Success_DEFAULT *messagedemo.MessageResponse

func (p *GetMessageResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(messagedemo.MessageResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetMessageResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetMessageResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetMessageResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetMessageResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetMessageResult) Unmarshal(in []byte) error {
	msg := new(messagedemo.MessageResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetMessageResult) GetSuccess() *messagedemo.MessageResponse {
	if !p.IsSetSuccess() {
		return GetMessageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*messagedemo.MessageResponse)
}

func (p *GetMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func messageActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(messagedemo.MessageActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(messagedemo.MessageService).MessageAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *MessageActionArgs:
		success, err := handler.(messagedemo.MessageService).MessageAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MessageActionResult)
		realResult.Success = success
	}
	return nil
}
func newMessageActionArgs() interface{} {
	return &MessageActionArgs{}
}

func newMessageActionResult() interface{} {
	return &MessageActionResult{}
}

type MessageActionArgs struct {
	Req *messagedemo.MessageActionRequest
}

func (p *MessageActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(messagedemo.MessageActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MessageActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MessageActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MessageActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in MessageActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *MessageActionArgs) Unmarshal(in []byte) error {
	msg := new(messagedemo.MessageActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MessageActionArgs_Req_DEFAULT *messagedemo.MessageActionRequest

func (p *MessageActionArgs) GetReq() *messagedemo.MessageActionRequest {
	if !p.IsSetReq() {
		return MessageActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MessageActionArgs) IsSetReq() bool {
	return p.Req != nil
}

type MessageActionResult struct {
	Success *messagedemo.MessageActionResponse
}

var MessageActionResult_Success_DEFAULT *messagedemo.MessageActionResponse

func (p *MessageActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(messagedemo.MessageActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MessageActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MessageActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MessageActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in MessageActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *MessageActionResult) Unmarshal(in []byte) error {
	msg := new(messagedemo.MessageActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MessageActionResult) GetSuccess() *messagedemo.MessageActionResponse {
	if !p.IsSetSuccess() {
		return MessageActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MessageActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*messagedemo.MessageActionResponse)
}

func (p *MessageActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetMessage(ctx context.Context, Req *messagedemo.MessageRequest) (r *messagedemo.MessageResponse, err error) {
	var _args GetMessageArgs
	_args.Req = Req
	var _result GetMessageResult
	if err = p.c.Call(ctx, "GetMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageAction(ctx context.Context, Req *messagedemo.MessageActionRequest) (r *messagedemo.MessageActionResponse, err error) {
	var _args MessageActionArgs
	_args.Req = Req
	var _result MessageActionResult
	if err = p.c.Call(ctx, "MessageAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
