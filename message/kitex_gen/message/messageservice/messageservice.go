// Code generated by Kitex v0.4.4. DO NOT EDIT.

package messageservice

import (
	"context"
	message "douyin_backend_microService/message/kitex_gen/message"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageServiceServiceInfo
}

var messageServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MessageService"
	handlerType := (*message.MessageService)(nil)
	methods := map[string]kitex.MethodInfo{
		"SendMessage":          kitex.NewMethodInfo(sendMessageHandler, newSendMessageArgs, newSendMessageResult, false),
		"GetMessageChatRecord": kitex.NewMethodInfo(getMessageChatRecordHandler, newGetMessageChatRecordArgs, newGetMessageChatRecordResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "idl",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func sendMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(message.MessageActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(message.MessageService).SendMessage(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SendMessageArgs:
		success, err := handler.(message.MessageService).SendMessage(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendMessageResult)
		realResult.Success = success
	}
	return nil
}
func newSendMessageArgs() interface{} {
	return &SendMessageArgs{}
}

func newSendMessageResult() interface{} {
	return &SendMessageResult{}
}

type SendMessageArgs struct {
	Req *message.MessageActionRequest
}

func (p *SendMessageArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(message.MessageActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendMessageArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendMessageArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendMessageArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in SendMessageArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *SendMessageArgs) Unmarshal(in []byte) error {
	msg := new(message.MessageActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendMessageArgs_Req_DEFAULT *message.MessageActionRequest

func (p *SendMessageArgs) GetReq() *message.MessageActionRequest {
	if !p.IsSetReq() {
		return SendMessageArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

type SendMessageResult struct {
	Success *message.MessageActionRequestResponse
}

var SendMessageResult_Success_DEFAULT *message.MessageActionRequestResponse

func (p *SendMessageResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(message.MessageActionRequestResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendMessageResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendMessageResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendMessageResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in SendMessageResult")
	}
	return proto.Marshal(p.Success)
}

func (p *SendMessageResult) Unmarshal(in []byte) error {
	msg := new(message.MessageActionRequestResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendMessageResult) GetSuccess() *message.MessageActionRequestResponse {
	if !p.IsSetSuccess() {
		return SendMessageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*message.MessageActionRequestResponse)
}

func (p *SendMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getMessageChatRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(message.MessageChatRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(message.MessageService).GetMessageChatRecord(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetMessageChatRecordArgs:
		success, err := handler.(message.MessageService).GetMessageChatRecord(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetMessageChatRecordResult)
		realResult.Success = success
	}
	return nil
}
func newGetMessageChatRecordArgs() interface{} {
	return &GetMessageChatRecordArgs{}
}

func newGetMessageChatRecordResult() interface{} {
	return &GetMessageChatRecordResult{}
}

type GetMessageChatRecordArgs struct {
	Req *message.MessageChatRequest
}

func (p *GetMessageChatRecordArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(message.MessageChatRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetMessageChatRecordArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetMessageChatRecordArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetMessageChatRecordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetMessageChatRecordArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetMessageChatRecordArgs) Unmarshal(in []byte) error {
	msg := new(message.MessageChatRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetMessageChatRecordArgs_Req_DEFAULT *message.MessageChatRequest

func (p *GetMessageChatRecordArgs) GetReq() *message.MessageChatRequest {
	if !p.IsSetReq() {
		return GetMessageChatRecordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetMessageChatRecordArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetMessageChatRecordResult struct {
	Success *message.MessageChatResponse
}

var GetMessageChatRecordResult_Success_DEFAULT *message.MessageChatResponse

func (p *GetMessageChatRecordResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(message.MessageChatResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetMessageChatRecordResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetMessageChatRecordResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetMessageChatRecordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetMessageChatRecordResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetMessageChatRecordResult) Unmarshal(in []byte) error {
	msg := new(message.MessageChatResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetMessageChatRecordResult) GetSuccess() *message.MessageChatResponse {
	if !p.IsSetSuccess() {
		return GetMessageChatRecordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetMessageChatRecordResult) SetSuccess(x interface{}) {
	p.Success = x.(*message.MessageChatResponse)
}

func (p *GetMessageChatRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SendMessage(ctx context.Context, Req *message.MessageActionRequest) (r *message.MessageActionRequestResponse, err error) {
	var _args SendMessageArgs
	_args.Req = Req
	var _result SendMessageResult
	if err = p.c.Call(ctx, "SendMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMessageChatRecord(ctx context.Context, Req *message.MessageChatRequest) (r *message.MessageChatResponse, err error) {
	var _args GetMessageChatRecordArgs
	_args.Req = Req
	var _result GetMessageChatRecordResult
	if err = p.c.Call(ctx, "GetMessageChatRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
